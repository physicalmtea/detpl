#ifndef __DETECT_PRELOAD_H_
#define __DETECT_PRELOAD_H_

#define true 1
#define false 0

#define GLIBC 0x0010
#define SYSCALL 0x0011
#define MATCH_LIST 0x0020

#define _GOT_LINKMAP_OFFSET 0x01

#if defined(__GLIBC__) && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))
extern int __xstat(int ver, const char *path, struct stat *buf);
extern int __xstat64(int ver, const char *path, struct stat64 *buf);
extern int __lxstat(int ver, const char *path, struct stat *buf);
extern int __lxstat64(int ver, const char *path, struct stat64 *buf);
#endif

ElfW(Dyn) *process_dynamic_segment;
ElfW(Dyn) *shared_object_dynamic_segment;

ElfW(Addr) *module_base_address;
ElfW(Addr) *process_module_base_address;
ElfW(Addr) *process_plt_got_segment;
ElfW(Rela) *process_relocation_table;
ElfW(Word) process_relocation_segment_max_size;
ElfW(Word) process_relocation_segment_entry_size;
ElfW(Sym) *process_symbol_table;
const char *process_string_table;
ElfW(Sym) *process_symbol_table;
const char *process_string_table;
ElfW(Sym) *so_symbol_table;
const char *so_string_table;
struct link_map *lm;

int dlname_from_segment_nouselib(void *address, char *object_path);
int dladdress_from_segment_nouselib(const char *dlname, unsigned long *address);
int elf_process_dynamic_nouselib(void);
int elf_so_dynamic_nouselib(const char *libc_name);
int nouselib = false;

int elf_so_dynamic_callback(struct dl_phdr_info *dpi, size_t size, void *data);
int elf_process_dynamic_callback(struct dl_phdr_info *dpi, size_t size, void *data);

void elf_symbol_segment(void);
void elf_process_segment(void);

uint64_t *elf_serach_process_got_symbol(const char *name, ElfW(Sym) *symbol_table, const char *string_table);
uint64_t *elf_serach_symbol(const char *name, ElfW(Sym) *symbol_table, const char *string_table);

int _dlname_from_segment_address(void *address, char *object_path);

static int dl_internal_hook_struct_check(void);
static int dl_symbol_check(void);
static int syslib_symbol_check(void);
void display_link_map(void);

extern void *__libc_dlopen_mode(const char *lib_name, int flag) __attribute__((weak));
extern void *__libc_dlsym(void *handle, const char *symbol_name) __attribute__((weak));
extern void *__libc_dlclose(void *handle) __attribute__((weak));
extern void *_dl_sym(void *handle, const char *symbol_name, void *caller) __attribute__((weak));
extern void *_dl_vsym(void *handle, const char *symbol_name, const char *version, void *caller) __attribute__((weak));
extern int _dl_addr(void *address, Dl_info *info, void *link_map, void *symtab) __attribute__((weak));

unsigned int get_glibc_version(void);
int found_process_dyn = false;

struct dl_open_hook{
	void *(*__libc_dlopen_mode)(const char *lib_name, int flag);
	void *(*__libc_dlsym)(void *handle, const char *symbol_name);
	int (*__libc_dlclose)(void *handle);
};

struct dlfcn_hook{
	void *(*dlopen) (const char *file, int mode, void *dl_caller);
	int (*dlclose) (void *handle);
	void *(*dlsym) (void *handle, const char *name, void *dl_caller);
	void *(*dlvsym) (void *handle, const char *name, const char *version, void *dl_caller);
	char *(*dlerror) (void);
	int (*dladdr) (const void *address, Dl_info *info);
	int (*dladdr1) (const void *address, Dl_info *info, void **extra_info, int flags);
	int (*dlinfo) (void *handle, int request, void *arg, void *dl_caller);
	void *(*dlmopen) (Lmid_t nsid, const char *file, int mode, void *dl_caller);
};

struct linux_dirent {
	long           d_ino;
	off_t          d_off;
	unsigned short d_reclen;
	char           d_name[];
};

typedef struct FileNode {
    char *filename;
    struct FileNode *next;
} FileNode;

typedef struct HashNode {
        char *filename;
        struct HashNode *next;
} HashNode;

typedef struct HashTable {
        HashNode **buckets;
        int size;
        pthread_mutex_t *locks;
} HashTable;

FileNode *glibc_list = NULL;
FileNode *syscall_list = NULL;

pthread_mutex_t glibc_list_lock = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t syscall_list_lock = PTHREAD_MUTEX_INITIALIZER;

pthread_mutex_t match_lock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t match_cond = PTHREAD_COND_INITIALIZER;
int glibc_done = 0, syscall_done = 0;

int syscall_dir_list(const char *filepath);

unsigned int hash_function(const char *str, int size)
{
	unsigned long hash = 5381;
	int c;

	while ((c = *str++))
		hash = ((hash << 5) + hash) + c;

	return hash % size;
}

#endif
